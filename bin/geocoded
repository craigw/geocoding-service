#! /usr/bin/env ruby

require 'rubygems'
require 'smqueue'
require 'json/pure'
require 'yaml'
require 'starling'
require 'graticule'

# Mmm. Geocoding.
#
# If you use this service you'll be using Enterprise Integration Patterns for:
# Request-Reply, Return-Address and Correlation-Identifier. How fancy is that?
#
# I'll assume you're familiar with a message bus and SMQueue and skip straight
# to how to use this service.
#
# 1. Pick a job identifier. A job is a single request to geocode an address.
#    This identifier will be used in all communications with the service about
#    your geocoding request. Make it good and unique - don't want to get your
#    jobs mixed up or you'll end up with addresses that have the wrong
#    geographical coordinates. Make it hard to guess too - don't make it
#    sequential! I'd normally use something like the UUID gem to generate
#    these identifiers. It needs to be a String.
#
#    When you request that a geocoding is performed you'll tell the service
#    what this number is by calling it a request_id. When the service sends
#    you a reply you'll get exactly the same identifier back but it'll be
#    called the correlation_id.
#
# 2. Pick a reply channel. Somehow you're going to want to find out where the
#    geocoding service thinks the address is. At the moment the reply channel
#    will receive messages on the same broker that the geocoding service
#    receives requests from. I'm not sure it that will always be the case. See
#    the documentation for your broker if you'd like to move the message from
#    here to somewhere else.
#
#    Normally I'd pick a queue name that is unique to the application that
#    requests the geocodings and have a consumer listening there. Something
#    like `/queue/friendsworldwide.geocoding.result`. How you specify your
#    reply channel depends again on your broker implemnetation.
#
# 3. Send your request. The service is expecting JSON that looks like this:
#
#     {
#       request_id: "208ef920-294c-012c-07da-001b63b8611d",
#       reply_to: "/queue/globallocator.geocding.results",
#       address: "1 Infinite Loop Cupertino, CA"
#     }
#
# 4. Receive a response on the reply channel. Something somewhere that you
#    write must be listening to this! Responses will be in JSON.
#
#    Replies look like this:
#
#     {
#       correlation_id: "208ef920-294c-012c-07da-001b63b8611d",
#       coordinates: {
#         latitude: 37.3305336,
#         longtitude: -122.0289606
#       }
#     }
#
#    Sometimes things go wrong - maybe the geocoding service couldn't find an
#    address. If that happens you'll get a message that looks a like this:
#
#     {
#       correlation_id: "208ef920-294c-012c-07da-001b63b8611d",
#       error: "unknown address"
#     }
#
#   These will be put on the same reply channel as successful responses. It's
#   your job to find out if a message is an error or not before processing it.
#

module SMQueue
  class StarlingAdapter < ::SMQueue::Adapter
    class Configuration < ::SMQueue::AdapterConfiguration
      DEFAULT_SERVER = '127.0.0.1:22122'

      has :name
      has :server, :default => DEFAULT_SERVER
    end

    def initialize(*args)
      super
      options = args.first
      @configuration = options[:configuration]
      @configuration[:server] ||= Configuration::DEFAULT_SERVER

      @client = ::Starling.new(@configuration[:server])
    end

    def put(*args, &block)
      @client.set @configuration[:name], args[0].to_json
    end

    def get(*args, &block)
      if block_given?
        loop do
          yield next_message
        end
      else
        next_message
      end
    end

    private
    def next_message
      ::SMQueue::Message(:headers => {},
        :body => JSON.parse(@client.get(@configuration[:name])))
    end
  end
end

raw_configuration = File.read(File.dirname(__FILE__) + '/../config/message_queue.yml')
configuration = YAML.load(raw_configuration)

raw_geocoder_configuration = File.read(File.dirname(__FILE__) + '/../config/geocoder.yml')
geocoder_configuration = YAML.load(raw_geocoder_configuration)
geocoder_service = Graticule.service(geocoder_configuration["service"])
geocoder = geocoder_service.new geocoder_configuration["credentials"]

input = SMQueue(configuration)
input.get do |request|
  job = request.body
  address = job["address"]
  reply_to = job["reply_to"]
  correlation_id = job["request_id"]
  reply = begin
    location = geocoder.locate address
    {
      "correlation_id" => correlation_id,
      "coordinates" => {
        "latitude" => location.coordinates[0].to_f,
        "longtitude" => location.coordinates[1].to_f
      }
    }
  rescue Graticule::AddressError => e
    {
      "correlation_id" => correlation_id,
      "error" => e.message
    }
  end
  reply_configuration = configuration.merge(:name => reply_to)
  reply_channel = SMQueue(:configuration => reply_configuration)
  reply_channel.put reply
end