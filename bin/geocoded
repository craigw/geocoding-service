#! /usr/bin/env ruby

require 'rubygems'
require 'smqueue'
require 'json/pure'
require 'yaml'
require 'starling'
require 'graticule'

module SMQueue
  class StarlingAdapter < ::SMQueue::Adapter
    class Configuration < ::SMQueue::AdapterConfiguration
      DEFAULT_SERVER = '127.0.0.1:22122'

      has :name
      has :server, :default => DEFAULT_SERVER
    end

    def initialize(*args)
      super
      options = args.first
      @configuration = options[:configuration]
      @configuration[:server] ||= Configuration::DEFAULT_SERVER

      @client = ::Starling.new(@configuration[:server])
    end

    def put(*args, &block)
      @client.set @configuration[:name], args[0].to_json
    end

    def get(*args, &block)
      if block_given?
        loop do
          yield next_message
        end
      else
        next_message
      end
    end

    private
    def next_message
      ::SMQueue::Message(:headers => {},
        :body => JSON.parse(@client.get(@configuration[:name])))
    end
  end
end

raw_configuration = File.read(File.dirname(__FILE__) + '/../config/message_queue.yml')
configuration = YAML.load(raw_configuration)

raw_geocoder_configuration = File.read(File.dirname(__FILE__) + '/../config/geocoder.yml')
geocoder_configuration = YAML.load(raw_geocoder_configuration)
geocoder_service = Graticule.service(geocoder_configuration["service"])
geocoder = geocoder_service.new geocoder_configuration["credentials"]

input = SMQueue(configuration)
input.get do |request|
  job = request.body
  address = job["address"]
  reply_to = job["reply_to"]
  correlation_id = job["request_id"]
  reply = begin
    location = geocoder.locate address
    {
      "correlation_id" => correlation_id,
      "coordinates" => {
        "latitude" => location.coordinates[0].to_f,
        "longtitude" => location.coordinates[1].to_f
      }
    }
  rescue Graticule::AddressError => e
    {
      "correlation_id" => correlation_id,
      "error" => e.message
    }
  end
  reply_configuration = configuration.merge(:name => reply_to)
  reply_channel = SMQueue(:configuration => reply_configuration)
  reply_channel.put reply
end